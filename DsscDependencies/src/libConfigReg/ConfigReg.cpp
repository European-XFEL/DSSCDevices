
#include <iostream>
#include <string>

#include "ConfigReg.h"
//#define DEBUG

using namespace std;

namespace SuS {

/**
    \brief Constructor.
*/
ConfigReg::ConfigReg()
: filename("Not loaded"),
  loaded(false)
{
}

ConfigReg::ConfigReg(string _filename)
: filename(_filename),
  loaded(false)
{
  initFromFile(_filename);
}

/**
    \brief Destructor.
*/
ConfigReg::~ConfigReg()
{
}

/**
        \brief Builds up the internal memory structure from a given memory structure description file generated by user.
*/
bool ConfigReg::initFromFile(const string &_filename)
{
  filename = _filename;
  ifstream ifs(filename,ifstream::in);
  if(ifs.is_open()){
    initModuleSets(ifs);
  }else{
    cout << "ERROR ConfigReg: File " << filename << " not found! " << endl;
  }

  return loaded;
}

/**
        \brief Saves the memory structure and values to currently open file
*/
void ConfigReg::save( void )
{
  saveToFile(filename);
}


void ConfigReg::addModuleSet(const string & moduleSetName, const string & modList, uint32_t address)
{
  addModuleSet(moduleSetName);
  addModules(moduleSetName,modList);
  setRegAddress(moduleSetName,address);
}


void ConfigReg::addModuleSet(const string &moduleSetName)
{
    moduleSetsMap[moduleSetName] = move(ModuleSet(moduleSetName));
}

void ConfigReg::removeModuleSet(const string &moduleSetName)
{
    auto setIt = moduleSetsMap.find(moduleSetName);
    if(setIt != moduleSetsMap.end())
    {
        moduleSetsMap.erase(setIt);
        cout << "ConfigReg: Module set "  << moduleSetName << " erased" << endl;
    }
}

/**
        \brief Saves the memory structure and values to given file
*/
void ConfigReg::saveToFile(const string &_filename)
{
  filename = _filename;

  ofstream out(filename, ofstream::out);
  if (!out.is_open()){
    utils::CoutColorKeeper keeper(utils::STDRED);
    cout << "ERROR ConfigReg: Could not write to file " << filename << endl;
    return;
  }

  for(auto set : moduleSetsMap){
    set.second.saveToStream(out);
  }

  utils::CoutColorKeeper keeper(utils::STDGREEN);
  cout << "Save ConfigReg to File: " << filename << endl;

  out.close();
}

std::vector<bool> ConfigReg::printContent(int moduleSet)
{
  cout << "Error: printContent(int) not supportet. Pass ModuleSet Name" << endl;
  exit(-1);
  return std::vector<bool>(0);
}

void ConfigReg::initModuleSets(ifstream & ifs)
{
  string line;
  do{
    if(!getline(ifs,line)) break;
    if(line.compare(0,10,"#ModuleSet") == 0 ){
      for(unsigned i=0; i<line.size(); ++i) ifs.unget();
      ModuleSet newSet(ifs);
      newSet.compareErrors = compareErrors;
      moduleSetsMap[newSet.name] = std::move(newSet);
      loaded = true;
    }
  }while(!ifs.eof());
}


vector<string> ConfigReg::getModuleSetNames() const
{
  vector<string> setNames;
  for(auto && set : moduleSetsMap){
    setNames.push_back(set.first);
  }

  return setNames;
}


const std::vector<std::string> & ConfigReg::getCompareErrors()
{
  for(auto && elem : moduleSetsMap)
  {
    auto & setErrors = elem.second.compareErrors;
    if(setErrors.empty()) continue;

    compareErrors.insert(compareErrors.end(),setErrors.begin(),setErrors.end());
    setErrors.clear();
  }
  return compareErrors;
}

}//namespace SuS


